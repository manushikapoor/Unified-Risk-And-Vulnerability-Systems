package com.vmware.controller;

import java.net.MalformedURLException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.vmware.dto.ActionResponseDTO;
import com.vmware.service.VulnerabilityActionService;

import io.swagger.annotations.ApiOperation;

@RestController
public class VulnerabilityActionsController {

	private static final Logger log = LoggerFactory.getLogger(VulnerabilityActionsController.class);
	
	@Autowired
	private VulnerabilityActionService vulnerabilityActionService;
	
	/**
	 * requestParams should have:
	 * {
	 * 	"selected": [{ossSecurityScanId: <int>, vulnId: <string>}, {...}],
	 * 	"role": <string>,
	 * 	"action": <string>,
	 * 	"comments": <string>,
	 * 	"evidenceFile": <multipartfile>
	 * }
	 * 
	 * @param requestParams
	 * @param file
	 * @return
	 */
	@PostMapping("/actionOnSelectedVulnerabilities")
	@ApiOperation("API to implement workflow for vulnerabilities marked as False Positive or remediation.")
	@ResponseBody
	public ActionResponseDTO markVulnerabilityAsFalsePositiveOrRemediation(
			@RequestParam Map<String, String> requestParams, 
			@RequestParam(value = "evidenceFile", required = false) MultipartFile file) {
		
		log.info("IN Marking vulnerability as false positive or remediation");
		ActionResponseDTO response = new ActionResponseDTO();
		try {
			vulnerabilityActionService.markVulnerabilityAsFalsePositiveOrRemediation(requestParams, file);
			log.info("Success");
			response.setData("Success");
		} catch(Exception e) {
			log.error(e.toString());
			response.setError(e.getMessage());
		}
		return response;
		
	}
	
	@GetMapping("/files/download/{fileName:.+}")
	public ResponseEntity downloadFileFromLocal(@PathVariable String fileName) {
		log.info("IN download file");
		Path path = Paths.get(fileName);
		Resource resource = null;
		try {
			resource = new UrlResource(path.toUri());
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		return ResponseEntity.ok()
				.contentType(MediaType.parseMediaType("application/octet-stream"))
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
				.body(resource);
	}
	
}
