package com.vmware.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import com.vmware.dto.ApplicationOverviewDto;
import com.vmware.entity.OssVulnerabilities;
import com.vmware.repository.OssVulnerabilitiesRepository;

import org.springframework.stereotype.Service;

@Service
public class applicationOverviewServiceImpl implements ApplicationOverviewService{

	@Autowired
	OssVulnerabilityService ossVulnerabilityService;
	
	@Autowired
	OssVulnerabilitiesRepository ossVulnerabilitiesRepository;
	
	@Override
	public Map<String,Integer> getCountOfVulnerabilities(String user, String role) {
		int open=0;
		int closed=0;
		List<OssVulnerabilities> vulnerabilities = new ArrayList<OssVulnerabilities>();
		Map<String,Integer> result = new HashMap<String, Integer>();
		if(role.equals("Developer")) {
			vulnerabilities = ossVulnerabilityService.findAllOssVulnerabilitiesByOwner(user);
		}
		else {
			vulnerabilities = ossVulnerabilityService.getAllOssVulnerabilities();
		}
		for(OssVulnerabilities vulnerability: vulnerabilities) {
			if(vulnerability.getStatus().equals("OPEN")) {
				open++;
			}else {
				closed++;
			}
		}
		result.put("OPEN", open);
		result.put("CLOSED", closed);
		result.put("TOTAL", open+closed);
		return result;
	}
	
	@Override
	public Map<String, Object> getVulnerabilityTrendBySeverityForCalendarYear(String user, String role) {
		List<OssVulnerabilities> vulnerabilities = new ArrayList<OssVulnerabilities>();
		if(role.equals("Developer")) {
			vulnerabilities = ossVulnerabilityService.findAllOssVulnerabilitiesByOwnerForCalendarYear(user);
		}
		else {
			vulnerabilities = ossVulnerabilityService.getAllOssVulnerabilitiesForCalendarYear();
		}
		
		ArrayList<Integer> high = new ArrayList<>();
		high.add(0);
		ArrayList<Integer> medium = new ArrayList<>();
		medium.add(0);
		ArrayList<Integer> low = new ArrayList<>();
		low.add(0);
		
		int highCount = 0;
		int mediumCount = 0;
		int lowCount = 0;
		
		int currentMonth = 1;
		for(OssVulnerabilities vuln: vulnerabilities) {
			if(Integer.parseInt(vuln.getModifiedOn().split("/")[0]) > currentMonth) {
				high.add(currentMonth-1, highCount);
				medium.add(currentMonth-1, mediumCount);
				low.add(currentMonth-1, lowCount);
				
				highCount = 0;
				mediumCount = 0;
				lowCount = 0;
				currentMonth++;
			}
			if(vuln.getSeverity().equals("High")) {
				highCount++;
			} else if(vuln.getSeverity().equals("Medium")) {
				mediumCount++;
			} else {
				lowCount++;
			}
		}
		
		HashMap<String, ArrayList<Integer>> vulnerabilityTrend = new HashMap<>();
		vulnerabilityTrend.put("Low", low);
		vulnerabilityTrend.put("Medium", medium);
		vulnerabilityTrend.put("High", high);
		
		HashMap<String, Object> response = new HashMap<>();
		response.put("data", vulnerabilityTrend);
		response.put("count", currentMonth);
		
		return response;
	}

	@Override
	public List<ApplicationOverviewDto> getApplicationOverview(String user, String role) {
		List<OssVulnerabilities> vulnerabilities= new ArrayList<OssVulnerabilities>();
		if(role.equals("Developer")) {
			vulnerabilities = ossVulnerabilitiesRepository.findByUpdatedByOrderByArtifactNameAsc(user);
		}else {
		vulnerabilities= ossVulnerabilitiesRepository.findByOrderByArtifactNameAsc();
		}
		//List<ApplicationOverviewDto> applicationOverviewDto = new ArrayList<ApplicationOverviewDto>();
		
		int totalVuln=0;
		String currentArtifactName ="";
		List<ApplicationOverviewDto> result = new ArrayList<>();
		int flag=vulnerabilities.size();
		int flag2=0;
		for(OssVulnerabilities vuln : vulnerabilities) {
			
			ApplicationOverviewDto applicationOverviewDto = new ApplicationOverviewDto();
			
			currentArtifactName = vuln.getArtifactName();
			
			if(currentArtifactName.equals(vuln.getArtifactName())) {
				flag2++;
				applicationOverviewDto.setUID(vuln.getArtifactId());
				applicationOverviewDto.setApplicationname(currentArtifactName);
				applicationOverviewDto.setOwner(vuln.getUpdatedBy());
				totalVuln++;
				applicationOverviewDto.setCompliance("non-compliant");
				applicationOverviewDto.setVulnerabilities(totalVuln);
			}
			else {
				
				result.add(applicationOverviewDto);
				totalVuln=1;
				applicationOverviewDto.setUID(vuln.getArtifactId());
				applicationOverviewDto.setApplicationname(vuln.getArtifactName());
				applicationOverviewDto.setOwner(vuln.getUpdatedBy());
				applicationOverviewDto.setVulnerabilities(totalVuln);
				applicationOverviewDto.setCompliance("non-compliant");
			}
			
			
			if(flag == flag2 ) {
				result.add(applicationOverviewDto);
			}
			
		}
		
		
		return result;
	}
}
